* Some dotfiles
This setup is mostly shell agnostic, supporting [[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html][eshell]], [[http://fishshell.com/][fish]], [[https://www.gnu.org/software/bash/][bash]], and [[http://www.zsh.org/][zsh]].

In the past, I spent most of my time in fish. However, lately, as I transition more of my workflows to emacs, I am using eshell and rarely use a terminal outside of emacs.

NOTE: The master repository is on [[https://gitlab.com/mnewt/dotfiles][GitLab]] but since most people use [[https://github.com/mnewt/dotfiles][GitHub]] it has been cloned there. Feel free to create issues or pull requests on either (but I do prefer [[https://gitlab.com][GitLab]]).

* Tour
** Applications & Utilities
Included are configurations for some programs, such as:
*** [[https://atom.io/][Atom]]
*** [[https://www.gnu.org/software/emacs/][Emacs]]
*** [[https://github.com/tmux/tmux][Tmux]]
*** [[https://vim.sourceforge.io/][Vim]] / [[https://neovim.io/][NeoVim]]

* Install
This procedure will establish a git repository to hold dotfiles in ~$HOME/.config/repos/$repo~, while pointing the workdir at $HOME. To make this function without causing problems, we will configure the repo to not show untracked files (since we don't want to track most of what is under $HOME). Then we explicitly add just the files we want.

This is similar to the bare repo technique outlined in [[https://developer.atlassian.com/blog/2016/02/best-way-to-store-dotfiles-git-bare-repo/][Nicola Paolucci's blog]]. However, it does not use a bare repo. Instead, it incorporates modications suggested by [[https://emacsair.me/][Jonas Bernoulli]] for [[https://github.com/magit/magit/issues/460#issuecomment-36139308][use with Magit]] (but really this is the best way to do it even without Magit). This technique is deceptively simple and yet powerful enough to handle complex dotfile configurations with multiple repos. The beauty is that your dotfiles are in their proper locations and you explicitly choose which files to track and everything else is ignored. No symlinks, no duplication, no scripts. Further, you can have multiple repos tracking different sets of files, all with their workdirs pointing to $HOME.

** Scenarios
If you want to set up a repo, you'll want to consider how to transition from whatever is in place at the moment. Here are some basic plans for the main scenarios.

*** Starting from scratch
If you want to start a brand new repo, you'll do something like this to initialize and start working with it.
#+BEGIN_SRC sh
  git init --separate-git-dir $HOME/.config/repos/dotfiles $HOME
#+END_SRC

*** Clone an existing repo
Clone your dotfiles, keeping the gitdir separate from the workdir
#+BEGIN_SRC sh
  git clone --separate-git-dir $HOME/.config/repos/dotfiles https://gitlab.com/mnewt/dotfiles.git $HOME
#+END_SRC

*** Don't show untracked files
Don't show untracked files since there will always be lots of stuff in $HOME that you don't want in your repo.
#+BEGIN_SRC sh
  env GITDIR=$HOME/.config/repos/dotfiles git config --local status.showUntrackedFiles no
#+END_SRC

*** Link to a repo from the $HOME workdir
The ~git-home-link~ function creates writes a .git file in $HOME pointing to one of the repos. By using this function, you can "activate" one of the repos such that you can use normal git comamnds in $HOME without specifying ~GITDIR~.

Put this function in your ~.bashrc~.
#+BEGIN_SRC sh
  git-home-link () {
    # Link repo specified by $1 to $HOME using a .git file link
    if [ -n "$1" ] && [ -e "$HOME/.config/repos/$1" ]; then
      echo "gitdir: .config/repos/$1" >"$HOME/.git"
    else
      echo "repo \"$1\" not found in $HOME/.config/repos/"
      echo "ls $HOME/.config/repos/:"
      ls $HOME/.config/repos/
    fi
  }
#+END_SRC

*** Back up conflicting dotfiles
If you want to checkout an existing repo into $HOME, you are probably going to have some conflicting files. Back them up before checking out.
#+BEGIN_SRC sh
# TODO
#+END_SRC

*** If necessary, remove symlinks to the old repository
If were symlinking dotfiles into place before moving to a bare repo, those links must be removed. These are the commands I used to migrate. Your mileage may vary. These are example commands and the last one is destructive. Be sure to know what you're doing!
#+BEGIN_SRC sh
  # Find links that you may want to delete
  find "$HOME" -maxdepth 1 -type l -print
  # Maybe go deeper and do some additional filtering. This is what I did on my macOS setup:
  find "$HOME" -not -path "$HOME/Library/*" -maxdepth 3 -type l -print
  # Delete them
  find "$HOME" -not -path "$HOME/Library/*" -maxdepth 3 -type l -delete
#+END_SRC

*** Start working with your new setup

#+BEGIN_SRC sh
  git-home-link dotfiles
  git add .bashrc
  git commit -m "add .bashrc to new dotfiles repo"
  git push -u origin master
  # Remove the link file when we are done so we don't accidentally commit
  # something in a project subdir to our dotfiles repo
  rm $HOME/.git
#+END_SRC

*** Working in Emacs
There are Emacs Lisp commands called ~git-home-link~ and ~git-home-unlink~ that make it easy to work with this setup in Magit or Projectile.  

* Update scripts
There are set of update scripts in the =bin= directory to keep all the
different software on a given system up to date.

Some of the things that can be updated:

- Arch Linux
- Atom Editor
- Clojure
- Debian/Ubuntu (apt-get)
- Emacs
- Fish Shell (fisherman)
- iTerm2
- macOS App Store
- macOS Homebrew
- Node.js Packages
- Python Packages
- Ruby Gems
- Tmux
- Vim/Neovim

The master =update= script runs all of these in succession.

* Application Notes

** Atom
Install atom, then run this to install packages
#+BEGIN_EXAMPLE
  apm install --packages-file ~/.atom/packages.txt
#+END_EXAMPLE

To save the list of currently installed packages
#+BEGIN_EXAMPLE
  apm list --bare --installed --dev false > ~/.atom/packages.txt
#+END_EXAMPLE

** Emacs
On macOS, it seems the version of makeinfo is too old and causes problems with [[https://github.com/abo-abo/swiper][ivy]]. Install a newer version, then install Emacs, edit init.el and m-packages.el, launch emacs, and have fun.
#+BEGIN_EXAMPLE
  brew install git ripgrep texinfo
  brew link --force texinfo
  update-emacs
#+END_EXAMPLE

** Fish
To install and switch your shell to =fish= on macOS:

#+BEGIN_EXAMPLE
  brew install fish
  chsh -s $(which fish)
  fish -l
  curl -Lo ~/.config/fish/functions/fisher.fish --create-dirs https://git.io/fisher
  fisher "$HOME/.config/fish_config" mnewt/fix
#+END_EXAMPLE

** Vim
Install Vim or Neovim, edit .vimrc, then run =update-vim= to install
packages.
#+BEGIN_EXAMPLE
  update-vim
#+END_EXAMPLE
