# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts. Unlike style sheets however,
# each selector can only be declared once.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:newline'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# * https://atom.io/docs/latest/using-atom-basic-customization#customizing-key-bindings
# * https://atom.io/docs/latest/behind-atom-keymaps-in-depth
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson

'atom-workspace atom-text-editor:not([mini])':
  'cmd-enter': 'proto-repl:execute-block'
  'cmd-shift-enter': 'proto-repl:execute-top-block'
  'cmd-alt-k': 'proto-repl:clear-repl'

  'alt-down': 'editor:add-selection-below'
  'alt-up': 'editor:add-selection-above'

'atom-workspace atom-text-editor.editor':
  # this toggles but won't deselect when toggling back off
  'ctrl-space': 'selection-mode:toggle-without-deselecting'

'atom-workspace atom-text-editor.editor.selection-mode':
  # this is your dedicated toggle-off-and-deselect
  'escape': 'selection-mode:cancel'

'atom-text-editor':
  'cmd-d': 'expand-region:expand'
  'cmd-shift-d': 'expand-region:shrink'
  'ctrl-d': 'find-and-replace:select-next'
  # 'alt-cmd-enter': 'goto-definition:go'
